// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package result

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Success struct {
	_tab flatbuffers.Table
}

func GetRootAsSuccess(buf []byte, offset flatbuffers.UOffsetT) *Success {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Success{}
	x.Init(buf, n+offset)
	return x
}

func FinishSuccessBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSuccess(buf []byte, offset flatbuffers.UOffsetT) *Success {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Success{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSuccessBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Success) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Success) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Success) Reason() SuccessReasonEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return SuccessReasonEnum(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Success) MutateReason(n SuccessReasonEnum) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Success) GasUsed() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Success) MutateGasUsed(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Success) GasRefunded() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Success) MutateGasRefunded(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Success) Logs(obj *Log, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Success) LogsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Success) Output(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Success) OutputLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Success) OutputBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Success) MutateOutput(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Success) DeployedAddress(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Success) DeployedAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Success) DeployedAddressBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Success) MutateDeployedAddress(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func SuccessStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SuccessAddReason(builder *flatbuffers.Builder, reason SuccessReasonEnum) {
	builder.PrependByteSlot(0, byte(reason), 0)
}
func SuccessAddGasUsed(builder *flatbuffers.Builder, gasUsed uint64) {
	builder.PrependUint64Slot(1, gasUsed, 0)
}
func SuccessAddGasRefunded(builder *flatbuffers.Builder, gasRefunded uint64) {
	builder.PrependUint64Slot(2, gasRefunded, 0)
}
func SuccessAddLogs(builder *flatbuffers.Builder, logs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(logs), 0)
}
func SuccessStartLogsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SuccessAddOutput(builder *flatbuffers.Builder, output flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(output), 0)
}
func SuccessStartOutputVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SuccessAddDeployedAddress(builder *flatbuffers.Builder, deployedAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(deployedAddress), 0)
}
func SuccessStartDeployedAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SuccessEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
