// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package result

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Halt struct {
	_tab flatbuffers.Table
}

func GetRootAsHalt(buf []byte, offset flatbuffers.UOffsetT) *Halt {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Halt{}
	x.Init(buf, n+offset)
	return x
}

func FinishHaltBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHalt(buf []byte, offset flatbuffers.UOffsetT) *Halt {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Halt{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHaltBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Halt) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Halt) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Halt) Reason() HaltReasonEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return HaltReasonEnum(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Halt) MutateReason(n HaltReasonEnum) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Halt) GasUsed() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Halt) MutateGasUsed(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func HaltStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func HaltAddReason(builder *flatbuffers.Builder, reason HaltReasonEnum) {
	builder.PrependByteSlot(0, byte(reason), 0)
}
func HaltAddGasUsed(builder *flatbuffers.Builder, gasUsed uint64) {
	builder.PrependUint64Slot(1, gasUsed, 0)
}
func HaltEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
