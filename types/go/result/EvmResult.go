// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package result

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EvmResult struct {
	_tab flatbuffers.Table
}

func GetRootAsEvmResult(buf []byte, offset flatbuffers.UOffsetT) *EvmResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvmResult{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvmResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEvmResult(buf []byte, offset flatbuffers.UOffsetT) *EvmResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvmResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvmResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EvmResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvmResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EvmResult) ResultType() ExResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ExResult(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EvmResult) MutateResultType(n ExResult) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *EvmResult) Result(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func EvmResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func EvmResultAddResultType(builder *flatbuffers.Builder, resultType ExResult) {
	builder.PrependByteSlot(0, byte(resultType), 0)
}
func EvmResultAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(result), 0)
}
func EvmResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
