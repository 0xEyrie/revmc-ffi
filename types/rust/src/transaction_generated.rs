// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod transaction {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TRANSACTION_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TRANSACTION_TYPE: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TRANSACTION_TYPE: [TransactionType; 6] = [
  TransactionType::Legacy,
  TransactionType::Eip2930,
  TransactionType::Eip1559,
  TransactionType::Eip4844,
  TransactionType::Eip7702,
  TransactionType::Custom,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TransactionType(pub i8);
#[allow(non_upper_case_globals)]
impl TransactionType {
  /// Legacy transaction type.
  pub const Legacy: Self = Self(0);
  /// EIP-2930 Access List transaction type.
  pub const Eip2930: Self = Self(1);
  /// EIP-1559 Fee market change transaction type.
  pub const Eip1559: Self = Self(2);
  /// EIP-4844 Blob transaction type.
  pub const Eip4844: Self = Self(3);
  /// EIP-7702 Set EOA account code transaction type.
  pub const Eip7702: Self = Self(4);
  /// Custom type means that transaction trait was extend and have custom types.
  pub const Custom: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Legacy,
    Self::Eip2930,
    Self::Eip1559,
    Self::Eip4844,
    Self::Eip7702,
    Self::Custom,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Legacy => Some("Legacy"),
      Self::Eip2930 => Some("Eip2930"),
      Self::Eip1559 => Some("Eip1559"),
      Self::Eip4844 => Some("Eip4844"),
      Self::Eip7702 => Some("Eip7702"),
      Self::Custom => Some("Custom"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TransactionType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TransactionType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TransactionType {
    type Output = TransactionType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TransactionType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TransactionType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TransactionType {}
pub enum TransactionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Transaction<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Transaction<'a> {
  type Inner = Transaction<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Transaction<'a> {
  pub const VT_TX_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_CALLER: flatbuffers::VOffsetT = 6;
  pub const VT_GAS_LIMIT: flatbuffers::VOffsetT = 8;
  pub const VT_GAS_PRICE: flatbuffers::VOffsetT = 10;
  pub const VT_NONCE: flatbuffers::VOffsetT = 12;
  pub const VT_TRANSACT_TO: flatbuffers::VOffsetT = 14;
  pub const VT_VALUE: flatbuffers::VOffsetT = 16;
  pub const VT_DATA: flatbuffers::VOffsetT = 18;
  pub const VT_GAS_PRIORITY_FEE: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Transaction { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TransactionArgs<'args>
  ) -> flatbuffers::WIPOffset<Transaction<'bldr>> {
    let mut builder = TransactionBuilder::new(_fbb);
    builder.add_nonce(args.nonce);
    builder.add_gas_limit(args.gas_limit);
    if let Some(x) = args.gas_priority_fee { builder.add_gas_priority_fee(x); }
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.transact_to { builder.add_transact_to(x); }
    if let Some(x) = args.gas_price { builder.add_gas_price(x); }
    if let Some(x) = args.caller { builder.add_caller(x); }
    builder.add_tx_type(args.tx_type);
    builder.finish()
  }


  #[inline]
  pub fn tx_type(&self) -> TransactionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TransactionType>(Transaction::VT_TX_TYPE, Some(TransactionType::Legacy)).unwrap()}
  }
  #[inline]
  pub fn caller(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_CALLER, None)}
  }
  #[inline]
  pub fn gas_limit(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Transaction::VT_GAS_LIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn gas_price(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_GAS_PRICE, None)}
  }
  #[inline]
  pub fn nonce(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Transaction::VT_NONCE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn transact_to(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_TRANSACT_TO, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_VALUE, None)}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_DATA, None)}
  }
  #[inline]
  pub fn gas_priority_fee(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_GAS_PRIORITY_FEE, None)}
  }
}

impl flatbuffers::Verifiable for Transaction<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<TransactionType>("tx_type", Self::VT_TX_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("caller", Self::VT_CALLER, false)?
     .visit_field::<u64>("gas_limit", Self::VT_GAS_LIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("gas_price", Self::VT_GAS_PRICE, false)?
     .visit_field::<u64>("nonce", Self::VT_NONCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("transact_to", Self::VT_TRANSACT_TO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("value", Self::VT_VALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("gas_priority_fee", Self::VT_GAS_PRIORITY_FEE, false)?
     .finish();
    Ok(())
  }
}
pub struct TransactionArgs<'a> {
    pub tx_type: TransactionType,
    pub caller: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub gas_limit: u64,
    pub gas_price: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub nonce: u64,
    pub transact_to: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub gas_priority_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for TransactionArgs<'a> {
  #[inline]
  fn default() -> Self {
    TransactionArgs {
      tx_type: TransactionType::Legacy,
      caller: None,
      gas_limit: 0,
      gas_price: None,
      nonce: 0,
      transact_to: None,
      value: None,
      data: None,
      gas_priority_fee: None,
    }
  }
}

pub struct TransactionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TransactionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_tx_type(&mut self, tx_type: TransactionType) {
    self.fbb_.push_slot::<TransactionType>(Transaction::VT_TX_TYPE, tx_type, TransactionType::Legacy);
  }
  #[inline]
  pub fn add_caller(&mut self, caller: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_CALLER, caller);
  }
  #[inline]
  pub fn add_gas_limit(&mut self, gas_limit: u64) {
    self.fbb_.push_slot::<u64>(Transaction::VT_GAS_LIMIT, gas_limit, 0);
  }
  #[inline]
  pub fn add_gas_price(&mut self, gas_price: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_GAS_PRICE, gas_price);
  }
  #[inline]
  pub fn add_nonce(&mut self, nonce: u64) {
    self.fbb_.push_slot::<u64>(Transaction::VT_NONCE, nonce, 0);
  }
  #[inline]
  pub fn add_transact_to(&mut self, transact_to: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_TRANSACT_TO, transact_to);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_VALUE, value);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_DATA, data);
  }
  #[inline]
  pub fn add_gas_priority_fee(&mut self, gas_priority_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_GAS_PRIORITY_FEE, gas_priority_fee);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TransactionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TransactionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Transaction<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Transaction<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Transaction");
      ds.field("tx_type", &self.tx_type());
      ds.field("caller", &self.caller());
      ds.field("gas_limit", &self.gas_limit());
      ds.field("gas_price", &self.gas_price());
      ds.field("nonce", &self.nonce());
      ds.field("transact_to", &self.transact_to());
      ds.field("value", &self.value());
      ds.field("data", &self.data());
      ds.field("gas_priority_fee", &self.gas_priority_fee());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Transaction`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transaction_unchecked`.
pub fn root_as_transaction(buf: &[u8]) -> Result<Transaction, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Transaction>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Transaction` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_transaction_unchecked`.
pub fn size_prefixed_root_as_transaction(buf: &[u8]) -> Result<Transaction, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Transaction>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Transaction` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transaction_unchecked`.
pub fn root_as_transaction_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Transaction<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Transaction<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Transaction` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transaction_unchecked`.
pub fn size_prefixed_root_as_transaction_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Transaction<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Transaction<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Transaction and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Transaction`.
pub unsafe fn root_as_transaction_unchecked(buf: &[u8]) -> Transaction {
  flatbuffers::root_unchecked::<Transaction>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Transaction and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Transaction`.
pub unsafe fn size_prefixed_root_as_transaction_unchecked(buf: &[u8]) -> Transaction {
  flatbuffers::size_prefixed_root_unchecked::<Transaction>(buf)
}
#[inline]
pub fn finish_transaction_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Transaction<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_transaction_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Transaction<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod transaction

