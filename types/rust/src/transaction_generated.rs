// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod transaction {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum StorageKeyOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StorageKey<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StorageKey<'a> {
  type Inner = StorageKey<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StorageKey<'a> {
  pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StorageKey { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StorageKeyArgs<'args>
  ) -> flatbuffers::WIPOffset<StorageKey<'bldr>> {
    let mut builder = StorageKeyBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    builder.finish()
  }


  #[inline]
  pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(StorageKey::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for StorageKey<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct StorageKeyArgs<'a> {
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for StorageKeyArgs<'a> {
  #[inline]
  fn default() -> Self {
    StorageKeyArgs {
      value: None,
    }
  }
}

pub struct StorageKeyBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StorageKeyBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageKey::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StorageKeyBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StorageKeyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StorageKey<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StorageKey<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StorageKey");
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum AccessListItemOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AccessListItem<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AccessListItem<'a> {
  type Inner = AccessListItem<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AccessListItem<'a> {
  pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_STORAGE_KEY: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AccessListItem { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AccessListItemArgs<'args>
  ) -> flatbuffers::WIPOffset<AccessListItem<'bldr>> {
    let mut builder = AccessListItemBuilder::new(_fbb);
    if let Some(x) = args.storage_key { builder.add_storage_key(x); }
    if let Some(x) = args.address { builder.add_address(x); }
    builder.finish()
  }


  #[inline]
  pub fn address(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AccessListItem::VT_ADDRESS, None)}
  }
  #[inline]
  pub fn storage_key(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<StorageKey<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<StorageKey>>>>(AccessListItem::VT_STORAGE_KEY, None)}
  }
}

impl flatbuffers::Verifiable for AccessListItem<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("address", Self::VT_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<StorageKey>>>>("storage_key", Self::VT_STORAGE_KEY, false)?
     .finish();
    Ok(())
  }
}
pub struct AccessListItemArgs<'a> {
    pub address: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub storage_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<StorageKey<'a>>>>>,
}
impl<'a> Default for AccessListItemArgs<'a> {
  #[inline]
  fn default() -> Self {
    AccessListItemArgs {
      address: None,
      storage_key: None,
    }
  }
}

pub struct AccessListItemBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AccessListItemBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_address(&mut self, address: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessListItem::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_storage_key(&mut self, storage_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<StorageKey<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessListItem::VT_STORAGE_KEY, storage_key);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AccessListItemBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AccessListItemBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AccessListItem<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AccessListItem<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AccessListItem");
      ds.field("address", &self.address());
      ds.field("storage_key", &self.storage_key());
      ds.finish()
  }
}
pub enum TransactionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Transaction<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Transaction<'a> {
  type Inner = Transaction<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Transaction<'a> {
  pub const VT_CALLER: flatbuffers::VOffsetT = 4;
  pub const VT_GAS_LIMIT: flatbuffers::VOffsetT = 6;
  pub const VT_GAS_PRICE: flatbuffers::VOffsetT = 8;
  pub const VT_NONCE: flatbuffers::VOffsetT = 10;
  pub const VT_TRANSACT_TO: flatbuffers::VOffsetT = 12;
  pub const VT_VALUE: flatbuffers::VOffsetT = 14;
  pub const VT_DATA: flatbuffers::VOffsetT = 16;
  pub const VT_GAS_PRIORITY_FEE: flatbuffers::VOffsetT = 18;
  pub const VT_ACCESS_LIST: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Transaction { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TransactionArgs<'args>
  ) -> flatbuffers::WIPOffset<Transaction<'bldr>> {
    let mut builder = TransactionBuilder::new(_fbb);
    builder.add_nonce(args.nonce);
    builder.add_gas_limit(args.gas_limit);
    if let Some(x) = args.access_list { builder.add_access_list(x); }
    if let Some(x) = args.gas_priority_fee { builder.add_gas_priority_fee(x); }
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.transact_to { builder.add_transact_to(x); }
    if let Some(x) = args.gas_price { builder.add_gas_price(x); }
    if let Some(x) = args.caller { builder.add_caller(x); }
    builder.finish()
  }


  #[inline]
  pub fn caller(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_CALLER, None)}
  }
  #[inline]
  pub fn gas_limit(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Transaction::VT_GAS_LIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn gas_price(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_GAS_PRICE, None)}
  }
  #[inline]
  pub fn nonce(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Transaction::VT_NONCE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn transact_to(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_TRANSACT_TO, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_VALUE, None)}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_DATA, None)}
  }
  #[inline]
  pub fn gas_priority_fee(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Transaction::VT_GAS_PRIORITY_FEE, None)}
  }
  #[inline]
  pub fn access_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AccessListItem<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AccessListItem>>>>(Transaction::VT_ACCESS_LIST, None)}
  }
}

impl flatbuffers::Verifiable for Transaction<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("caller", Self::VT_CALLER, false)?
     .visit_field::<u64>("gas_limit", Self::VT_GAS_LIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("gas_price", Self::VT_GAS_PRICE, false)?
     .visit_field::<u64>("nonce", Self::VT_NONCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("transact_to", Self::VT_TRANSACT_TO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("value", Self::VT_VALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("gas_priority_fee", Self::VT_GAS_PRIORITY_FEE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AccessListItem>>>>("access_list", Self::VT_ACCESS_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct TransactionArgs<'a> {
    pub caller: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub gas_limit: u64,
    pub gas_price: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub nonce: u64,
    pub transact_to: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub gas_priority_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub access_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AccessListItem<'a>>>>>,
}
impl<'a> Default for TransactionArgs<'a> {
  #[inline]
  fn default() -> Self {
    TransactionArgs {
      caller: None,
      gas_limit: 0,
      gas_price: None,
      nonce: 0,
      transact_to: None,
      value: None,
      data: None,
      gas_priority_fee: None,
      access_list: None,
    }
  }
}

pub struct TransactionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TransactionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_caller(&mut self, caller: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_CALLER, caller);
  }
  #[inline]
  pub fn add_gas_limit(&mut self, gas_limit: u64) {
    self.fbb_.push_slot::<u64>(Transaction::VT_GAS_LIMIT, gas_limit, 0);
  }
  #[inline]
  pub fn add_gas_price(&mut self, gas_price: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_GAS_PRICE, gas_price);
  }
  #[inline]
  pub fn add_nonce(&mut self, nonce: u64) {
    self.fbb_.push_slot::<u64>(Transaction::VT_NONCE, nonce, 0);
  }
  #[inline]
  pub fn add_transact_to(&mut self, transact_to: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_TRANSACT_TO, transact_to);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_VALUE, value);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_DATA, data);
  }
  #[inline]
  pub fn add_gas_priority_fee(&mut self, gas_priority_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_GAS_PRIORITY_FEE, gas_priority_fee);
  }
  #[inline]
  pub fn add_access_list(&mut self, access_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AccessListItem<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Transaction::VT_ACCESS_LIST, access_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TransactionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TransactionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Transaction<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Transaction<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Transaction");
      ds.field("caller", &self.caller());
      ds.field("gas_limit", &self.gas_limit());
      ds.field("gas_price", &self.gas_price());
      ds.field("nonce", &self.nonce());
      ds.field("transact_to", &self.transact_to());
      ds.field("value", &self.value());
      ds.field("data", &self.data());
      ds.field("gas_priority_fee", &self.gas_priority_fee());
      ds.field("access_list", &self.access_list());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Transaction`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transaction_unchecked`.
pub fn root_as_transaction(buf: &[u8]) -> Result<Transaction, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Transaction>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Transaction` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_transaction_unchecked`.
pub fn size_prefixed_root_as_transaction(buf: &[u8]) -> Result<Transaction, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Transaction>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Transaction` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transaction_unchecked`.
pub fn root_as_transaction_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Transaction<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Transaction<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Transaction` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_transaction_unchecked`.
pub fn size_prefixed_root_as_transaction_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Transaction<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Transaction<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Transaction and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Transaction`.
pub unsafe fn root_as_transaction_unchecked(buf: &[u8]) -> Transaction {
  flatbuffers::root_unchecked::<Transaction>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Transaction and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Transaction`.
pub unsafe fn size_prefixed_root_as_transaction_unchecked(buf: &[u8]) -> Transaction {
  flatbuffers::size_prefixed_root_unchecked::<Transaction>(buf)
}
#[inline]
pub fn finish_transaction_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Transaction<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_transaction_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Transaction<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod transaction

