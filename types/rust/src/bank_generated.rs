// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod bank {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BANK_ACTION: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BANK_ACTION: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BANK_ACTION: [BankAction; 3] = [
  BankAction::PLUS,
  BankAction::MINUS,
  BankAction::COMMIT,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BankAction(pub u8);
#[allow(non_upper_case_globals)]
impl BankAction {
  pub const PLUS: Self = Self(0);
  pub const MINUS: Self = Self(1);
  pub const COMMIT: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::PLUS,
    Self::MINUS,
    Self::COMMIT,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::PLUS => Some("PLUS"),
      Self::MINUS => Some("MINUS"),
      Self::COMMIT => Some("COMMIT"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BankAction {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BankAction {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BankAction {
    type Output = BankAction;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BankAction {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BankAction {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BankAction {}
pub enum BankRecordOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BankRecord<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BankRecord<'a> {
  type Inner = BankRecord<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BankRecord<'a> {
  pub const VT_COIN: flatbuffers::VOffsetT = 4;
  pub const VT_OWNER: flatbuffers::VOffsetT = 6;
  pub const VT_VALUE: flatbuffers::VOffsetT = 8;
  pub const VT_ACTION: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BankRecord { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BankRecordArgs<'args>
  ) -> flatbuffers::WIPOffset<BankRecord<'bldr>> {
    let mut builder = BankRecordBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.owner { builder.add_owner(x); }
    if let Some(x) = args.coin { builder.add_coin(x); }
    builder.add_action(args.action);
    builder.finish()
  }


  #[inline]
  pub fn coin(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(BankRecord::VT_COIN, None)}
  }
  #[inline]
  pub fn owner(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(BankRecord::VT_OWNER, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(BankRecord::VT_VALUE, None)}
  }
  #[inline]
  pub fn action(&self) -> BankAction {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BankAction>(BankRecord::VT_ACTION, Some(BankAction::PLUS)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BankRecord<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("coin", Self::VT_COIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("owner", Self::VT_OWNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("value", Self::VT_VALUE, false)?
     .visit_field::<BankAction>("action", Self::VT_ACTION, false)?
     .finish();
    Ok(())
  }
}
pub struct BankRecordArgs<'a> {
    pub coin: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub owner: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub action: BankAction,
}
impl<'a> Default for BankRecordArgs<'a> {
  #[inline]
  fn default() -> Self {
    BankRecordArgs {
      coin: None,
      owner: None,
      value: None,
      action: BankAction::PLUS,
    }
  }
}

pub struct BankRecordBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BankRecordBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_coin(&mut self, coin: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BankRecord::VT_COIN, coin);
  }
  #[inline]
  pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BankRecord::VT_OWNER, owner);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BankRecord::VT_VALUE, value);
  }
  #[inline]
  pub fn add_action(&mut self, action: BankAction) {
    self.fbb_.push_slot::<BankAction>(BankRecord::VT_ACTION, action, BankAction::PLUS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BankRecordBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BankRecordBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BankRecord<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BankRecord<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BankRecord");
      ds.field("coin", &self.coin());
      ds.field("owner", &self.owner());
      ds.field("value", &self.value());
      ds.field("action", &self.action());
      ds.finish()
  }
}
pub enum BankRecordsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BankRecords<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BankRecords<'a> {
  type Inner = BankRecords<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BankRecords<'a> {
  pub const VT_RECORDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BankRecords { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BankRecordsArgs<'args>
  ) -> flatbuffers::WIPOffset<BankRecords<'bldr>> {
    let mut builder = BankRecordsBuilder::new(_fbb);
    if let Some(x) = args.records { builder.add_records(x); }
    builder.finish()
  }


  #[inline]
  pub fn records(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BankRecord<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BankRecord>>>>(BankRecords::VT_RECORDS, None)}
  }
}

impl flatbuffers::Verifiable for BankRecords<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BankRecord>>>>("records", Self::VT_RECORDS, false)?
     .finish();
    Ok(())
  }
}
pub struct BankRecordsArgs<'a> {
    pub records: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BankRecord<'a>>>>>,
}
impl<'a> Default for BankRecordsArgs<'a> {
  #[inline]
  fn default() -> Self {
    BankRecordsArgs {
      records: None,
    }
  }
}

pub struct BankRecordsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BankRecordsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_records(&mut self, records: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BankRecord<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BankRecords::VT_RECORDS, records);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BankRecordsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BankRecordsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BankRecords<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BankRecords<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BankRecords");
      ds.field("records", &self.records());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BankRecords`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_bank_records_unchecked`.
pub fn root_as_bank_records(buf: &[u8]) -> Result<BankRecords, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BankRecords>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BankRecords` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_bank_records_unchecked`.
pub fn size_prefixed_root_as_bank_records(buf: &[u8]) -> Result<BankRecords, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BankRecords>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BankRecords` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_bank_records_unchecked`.
pub fn root_as_bank_records_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BankRecords<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BankRecords<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BankRecords` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_bank_records_unchecked`.
pub fn size_prefixed_root_as_bank_records_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BankRecords<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BankRecords<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BankRecords and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BankRecords`.
pub unsafe fn root_as_bank_records_unchecked(buf: &[u8]) -> BankRecords {
  flatbuffers::root_unchecked::<BankRecords>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BankRecords and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BankRecords`.
pub unsafe fn size_prefixed_root_as_bank_records_unchecked(buf: &[u8]) -> BankRecords {
  flatbuffers::size_prefixed_root_unchecked::<BankRecords>(buf)
}
#[inline]
pub fn finish_bank_records_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<BankRecords<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_bank_records_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<BankRecords<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod bank

