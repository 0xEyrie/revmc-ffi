// automatically generated by the FlatBuffers compiler, do not modify

// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod block {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum BlockOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Block<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Block<'a> {
        type Inner = Block<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Block<'a> {
        pub const VT_NUMBER: flatbuffers::VOffsetT = 4;
        pub const VT_COINBASE: flatbuffers::VOffsetT = 6;
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 8;
        pub const VT_GAS_LIMIT: flatbuffers::VOffsetT = 10;
        pub const VT_BASEFEE: flatbuffers::VOffsetT = 12;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Block { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args BlockArgs<'args>,
        ) -> flatbuffers::WIPOffset<Block<'bldr>> {
            let mut builder = BlockBuilder::new(_fbb);
            if let Some(x) = args.basefee {
                builder.add_basefee(x);
            }
            if let Some(x) = args.gas_limit {
                builder.add_gas_limit(x);
            }
            if let Some(x) = args.timestamp {
                builder.add_timestamp(x);
            }
            if let Some(x) = args.coinbase {
                builder.add_coinbase(x);
            }
            if let Some(x) = args.number {
                builder.add_number(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn number(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Block::VT_NUMBER,
                        None,
                    )
            }
        }
        #[inline]
        pub fn coinbase(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Block::VT_COINBASE,
                        None,
                    )
            }
        }
        #[inline]
        pub fn timestamp(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Block::VT_TIMESTAMP,
                        None,
                    )
            }
        }
        #[inline]
        pub fn gas_limit(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Block::VT_GAS_LIMIT,
                        None,
                    )
            }
        }
        #[inline]
        pub fn basefee(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Block::VT_BASEFEE,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for Block<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "number",
                    Self::VT_NUMBER,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "coinbase",
                    Self::VT_COINBASE,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "timestamp",
                    Self::VT_TIMESTAMP,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "gas_limit",
                    Self::VT_GAS_LIMIT,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "basefee",
                    Self::VT_BASEFEE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct BlockArgs<'a> {
        pub number: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub coinbase: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub timestamp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub gas_limit: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub basefee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for BlockArgs<'a> {
        #[inline]
        fn default() -> Self {
            BlockArgs {
                number: None,
                coinbase: None,
                timestamp: None,
                gas_limit: None,
                basefee: None,
            }
        }
    }

    pub struct BlockBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlockBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_number(&mut self, number: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_NUMBER, number);
        }
        #[inline]
        pub fn add_coinbase(
            &mut self,
            coinbase: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_COINBASE, coinbase);
        }
        #[inline]
        pub fn add_timestamp(
            &mut self,
            timestamp: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_TIMESTAMP, timestamp);
        }
        #[inline]
        pub fn add_gas_limit(
            &mut self,
            gas_limit: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_GAS_LIMIT, gas_limit);
        }
        #[inline]
        pub fn add_basefee(
            &mut self,
            basefee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_BASEFEE, basefee);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlockBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            BlockBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Block<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Block<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Block");
            ds.field("number", &self.number());
            ds.field("coinbase", &self.coinbase());
            ds.field("timestamp", &self.timestamp());
            ds.field("gas_limit", &self.gas_limit());
            ds.field("basefee", &self.basefee());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Block`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_block_unchecked`.
    pub fn root_as_block(buf: &[u8]) -> Result<Block, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Block>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Block` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_block_unchecked`.
    pub fn size_prefixed_root_as_block(
        buf: &[u8],
    ) -> Result<Block, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Block>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Block` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_block_unchecked`.
    pub fn root_as_block_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Block<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Block<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Block` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_block_unchecked`.
    pub fn size_prefixed_root_as_block_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Block<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Block<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Block and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Block`.
    pub unsafe fn root_as_block_unchecked(buf: &[u8]) -> Block {
        flatbuffers::root_unchecked::<Block>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Block and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Block`.
    pub unsafe fn size_prefixed_root_as_block_unchecked(buf: &[u8]) -> Block {
        flatbuffers::size_prefixed_root_unchecked::<Block>(buf)
    }
    #[inline]
    pub fn finish_block_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Block<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_block_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Block<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod block
