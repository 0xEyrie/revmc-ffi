// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod account {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AccountRecordOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AccountRecord<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AccountRecord<'a> {
  type Inner = AccountRecord<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AccountRecord<'a> {
  pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_SEQUENCE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AccountRecord { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AccountRecordArgs<'args>
  ) -> flatbuffers::WIPOffset<AccountRecord<'bldr>> {
    let mut builder = AccountRecordBuilder::new(_fbb);
    builder.add_sequence(args.sequence);
    if let Some(x) = args.address { builder.add_address(x); }
    builder.finish()
  }


  #[inline]
  pub fn address(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AccountRecord::VT_ADDRESS, None)}
  }
  #[inline]
  pub fn sequence(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(AccountRecord::VT_SEQUENCE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AccountRecord<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("address", Self::VT_ADDRESS, false)?
     .visit_field::<u64>("sequence", Self::VT_SEQUENCE, false)?
     .finish();
    Ok(())
  }
}
pub struct AccountRecordArgs<'a> {
    pub address: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub sequence: u64,
}
impl<'a> Default for AccountRecordArgs<'a> {
  #[inline]
  fn default() -> Self {
    AccountRecordArgs {
      address: None,
      sequence: 0,
    }
  }
}

pub struct AccountRecordBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AccountRecordBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_address(&mut self, address: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccountRecord::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_sequence(&mut self, sequence: u64) {
    self.fbb_.push_slot::<u64>(AccountRecord::VT_SEQUENCE, sequence, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AccountRecordBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AccountRecordBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AccountRecord<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AccountRecord<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AccountRecord");
      ds.field("address", &self.address());
      ds.field("sequence", &self.sequence());
      ds.finish()
  }
}
pub enum AccountRecordsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AccountRecords<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AccountRecords<'a> {
  type Inner = AccountRecords<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AccountRecords<'a> {
  pub const VT_RECORDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AccountRecords { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AccountRecordsArgs<'args>
  ) -> flatbuffers::WIPOffset<AccountRecords<'bldr>> {
    let mut builder = AccountRecordsBuilder::new(_fbb);
    if let Some(x) = args.records { builder.add_records(x); }
    builder.finish()
  }


  #[inline]
  pub fn records(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AccountRecord<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AccountRecord>>>>(AccountRecords::VT_RECORDS, None)}
  }
}

impl flatbuffers::Verifiable for AccountRecords<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AccountRecord>>>>("records", Self::VT_RECORDS, false)?
     .finish();
    Ok(())
  }
}
pub struct AccountRecordsArgs<'a> {
    pub records: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AccountRecord<'a>>>>>,
}
impl<'a> Default for AccountRecordsArgs<'a> {
  #[inline]
  fn default() -> Self {
    AccountRecordsArgs {
      records: None,
    }
  }
}

pub struct AccountRecordsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AccountRecordsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_records(&mut self, records: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AccountRecord<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccountRecords::VT_RECORDS, records);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AccountRecordsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AccountRecordsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AccountRecords<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AccountRecords<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AccountRecords");
      ds.field("records", &self.records());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AccountRecords`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_account_records_unchecked`.
pub fn root_as_account_records(buf: &[u8]) -> Result<AccountRecords, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AccountRecords>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AccountRecords` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_account_records_unchecked`.
pub fn size_prefixed_root_as_account_records(buf: &[u8]) -> Result<AccountRecords, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AccountRecords>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AccountRecords` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_account_records_unchecked`.
pub fn root_as_account_records_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AccountRecords<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AccountRecords<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AccountRecords` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_account_records_unchecked`.
pub fn size_prefixed_root_as_account_records_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AccountRecords<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AccountRecords<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AccountRecords and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AccountRecords`.
pub unsafe fn root_as_account_records_unchecked(buf: &[u8]) -> AccountRecords {
  flatbuffers::root_unchecked::<AccountRecords>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AccountRecords and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AccountRecords`.
pub unsafe fn size_prefixed_root_as_account_records_unchecked(buf: &[u8]) -> AccountRecords {
  flatbuffers::size_prefixed_root_unchecked::<AccountRecords>(buf)
}
#[inline]
pub fn finish_account_records_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AccountRecords<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_account_records_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AccountRecords<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod account

